use std::path::PathBuf;
use std::sync::Arc;
use clap::{Parser, ValueEnum};

#[derive(ValueEnum, Debug, Clone, Copy)]
pub enum DebugMode {
    /// Display no debug output at all by default
    None,
    /// Display debug output for all modes
    All,
    /// Display tokens from the lexer
    Lexer,
    /// Display AST generated by the parser
    Parser,
    /// Display interpreter debug output
    Interpreter,
}

#[derive(Parser, Debug)]
#[clap(
    author,
    version,
    about="A language designed for AP Computer Science Principals students"
)]
pub struct CommandLine {
    /// The file that will be run, pass in a file path
    #[arg(required_unless_present_any=&["eval", "eval_stdin"], conflicts_with_all=&["eval", "eval_stdin"])]
    pub file: Option<PathBuf>,

    /// Execute code passed into stdin
    #[arg(short='e', long, conflicts_with_all=&["file", "eval_stdin"])]
    pub eval: Option<Arc<str>>,

    /// Execute code from standard input (not a repl)
    #[arg(long, conflicts_with_all=&["file", "eval"])]
    pub eval_stdin: bool,

    /// Specify the internal debug mode
    #[arg(short='d', long, value_enum, default_value="none")] 
    pub debug: DebugMode,

    /// Run the checker without executing the code
    #[arg(short='c', long, conflicts_with="debug")]
    pub check: bool,
    
    /// Increase this if you are running deeply recursive code and are
    ///  getting stack overflow errors.
    /// Or if you know what you are doing
    /// Max size (in Bytes) of the stack for the interpreter
    /// Default stack size is 1MiB which grows to 8MiB if needed
    /// DO NOT SET LESS THAN 1MiB
    #[arg(long, default_value_t={8 * 1024 * 1024})]
    pub stack_size: usize,
}
