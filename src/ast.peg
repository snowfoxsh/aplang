program -> declaration* EOF ;

declaration -> statement | proc_decl ;

statement -> expression_stmt
           | if_stmt
           | repeat_times_stmt
           | repeat_until_stmt
           | for_each_stmt
           | return_stmt
           | block
           ;

block -> "{" declaration "}" ;
return_stmt -> "RETURN" expression?;

if_stmt -> "IF" "(" expression ")" block ;
repeat_times_stmt -> "REPEAT" expr "TIMES" block ;
repeat_until_stmt -> "REPEAT" "UNTIL" expr block ;
for_each_stmt -> "FOR" "EACH" IDENT "IN" expr block ;


expression_stmt -> expression;
expression -> logical_or ;
logical_or -> logical_and ( "OR" logical_and )* ;
logical_and -> equality ( "AND" equality )* ;

equality -> comparison ( ( "==" | "!=" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<=" | "<" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary | primary ;


primary -> "(" expression ")"
    | func_call
    | access
    | list
    | LITERAL
    | IDENT

func_call -> IDENT "(" arguments? ")" ;

arguments -> expression ( "," expression )* ;

access -> primary ( "[" expr "]" )*

list -> "[" arguments? "]" ;


LITERAL -> "TRUE" | "FALSE" | "NULL" | NUMBER | STRING