use std::fmt::format;
use std::fs;
use clap::{command, Parser as ClapParser, ValueEnum};
use logos::Logos;
use crate::syntax_kind::SyntaxKind;
use crate::parser::Parser;
use crate::repl::run_repl;
use rustyline::Result;

mod syntax_kind;
mod parser;
mod syntax;
mod lexer;
mod repl;
mod run;

#[derive(ValueEnum, Debug, Clone, Copy)]
enum DebugMode {
    /// Print expression output
    None,
    /// Print AST generated by parser
    Parser,
    /// Print Tokens generated by the Lexer
    Lexer,
}

#[derive(ClapParser, Debug)]
#[clap(author, version, about="A language designed for AP Computer Science Principles students")]
struct Cli {
    /// a file that you would like run, leave this out to run the REPL
    file: Option<String>,

    #[arg(short='d', long, default_value="none", value_name="MODE", value_enum)]
    debug: DebugMode,

    #[arg(short='e', long, value_name="CODE")]
    eval: Option<String>,
}

fn main() {
    let cli: Cli = Cli::parse();

    let run_code = match cli.debug {
        DebugMode::None => run::run,
        DebugMode::Parser => run::debug_parser,
        DebugMode::Lexer => run::debug_lexer,
    };

    if let Some(file_path) = cli.file {
        let code = fs::read_to_string(file_path.clone())
            .expect(format!("could not read file: {}", file_path).as_str());

        run_code(code);
        return;
    }

    if let Some(code) = cli.eval {
        run_code(code);
        return;
    }


    run_repl().unwrap()
}

fn print_syntax_kind(input: String) {

}